/*
* Title: Heaps and AVL Tree
* Author: Musa YiÄŸit Yayla
* ID: 22003108
* Section: 1
* Assignment: 3
* Description: This file be used to provide the user with a heap sort function
*/
#include <cstddef>
#include <fstream>
#include <string>
#include <iostream>
#include <random>
#include "heap.h"

using namespace std;

//initially create a heap
void heapSort(int arr[], int length, long long& moveCount, long long& compCount){
    heap newHeap(length);
    //newHeap.buildHeap(arr, length, moveCount, compCount);
    int* newArr = new int[length];
    for(int i = 0; i < length; i++){
        newArr[i] = arr[i];
    }
    newHeap.buildHeap(newArr, length, moveCount, compCount); //create the heap from the copied array

     //we have to create a new array to store the result since our heap data structure removes elements one by one
    int leftCounter = 0;
    for(int i = length - 1; i >= 0; i--){
        arr[i] = newHeap.popMaximum(moveCount, compCount);
    }
    /*if(newArr != NULL){
        delete[] newArr;
    }*/
}
void test0(){
    int n = 20;
    int arr[n];
    for(int i = 0; i < n; i++){
        arr[i] = rand() % 40;
    }
    long long moveCount = 0, compCount = 0;
    heapSort(arr, n, moveCount, compCount);

    for(int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }
}
void test1(){
    int n = 10;
    int arr[n] = {6, 12, 4, 4, 3, 2, 8, 9, 18, 28};

    long long moveCount = 0, compCount = 0;
    heapSort(arr, n, moveCount, compCount);

    for(int i = 0; i < n; i++){
        cout << arr[i] << " ";
    }
}
void test2(){
    int n = 1000;
    int arr[n] = {
    30367, 27333, 25612, 3439, 10655, 13542, 2224, 1802, 20108, 4100, 15588, 29838, 16937, 23924, 9374, 12763,
    31589, 23694, 9397, 11396, 15392, 3182, 15158, 12594, 2087, 22388, 13514, 30512, 13126, 25068, 2000, 9074,
    22413, 6651, 26966, 20401, 2920, 7519, 2803, 7531, 691, 4785, 28688, 22916, 6952, 14452, 2763, 27415, 28672,
    19739, 25168, 18876, 1356, 7783, 20078, 16799, 21671, 28035, 261, 11230, 15022, 6607, 9478, 29210, 16051,
    10190, 4025, 23645, 3770, 5713, 32260, 32068, 21206, 9934, 27159, 25606, 2684, 9045, 25896, 31149, 10365, 14,
    18926, 27278, 17114, 5555, 14767, 15708, 1736, 2342, 17203, 7560, 27669, 31225, 6587, 27730, 13660, 28254,
    12688, 4951, 26729, 27429, 7287, 486, 17477, 13192, 28126, 22405, 142, 11506, 25184, 22180, 32483, 12910,
    2078, 14085, 31631, 12239, 6204, 11560, 31750, 2637, 3700, 760, 2584, 29459, 14144, 32300, 9318, 19510,
    14619, 19783, 5417, 30994, 21688, 19365, 25515, 15318, 11289, 26899, 11997, 22700, 21781, 10324, 21756, 5960,
    5876, 10304, 20024, 4232, 32383, 559, 4970, 25448, 32063, 27163, 15284, 21022, 2604, 10784, 19849, 11577,
    16978, 14276, 20691, 5374, 20735, 23524, 32588, 9506, 4838, 28109, 278, 7637, 26505, 2208, 29708, 27353,
    5818, 21062, 16317, 15525, 16718, 11773, 405, 2083, 27398, 1556, 25017, 30287, 27412, 9323, 7537, 4695,
    25524, 586, 29942, 3661, 8754, 22517, 22802, 31089, 16671, 618, 12720, 23228, 5201, 5561, 28514, 20560,
    29766, 25571, 27860, 31889, 26651, 30125, 25662, 17688, 2034, 28201, 30181, 18693, 17714, 3082, 5473, 17853,
    13650, 14655, 30072, 27888, 20448, 10374, 7772, 1083, 24615, 30690, 19085, 4271, 29300, 24642, 15190, 25738,
    17902, 26861, 23566, 22110, 2901, 16310, 29384, 25215, 22281, 19451, 6534, 28938, 5391, 19924, 15208, 21115,
    16695, 13727, 30768, 16125, 7117, 27895, 8922, 25823, 13558, 8214, 23976, 32121, 15640, 19561, 19433, 25564,
    11157, 8084, 28619, 21090, 29944, 31116, 1477, 489, 15917, 11317, 6044, 12460, 8207, 25742, 23157, 32264,
    32437, 20400, 842, 3791, 29636, 28524, 30889, 15789, 18968, 16410, 16869, 24744, 26214, 31685, 29520, 12957,
    15123, 11665, 12309, 27647, 946, 24783, 30721, 18440, 11543, 5077, 9037, 14545, 29944, 28778, 26708, 5283,
    31867, 3489, 30590, 15548, 1338, 20980, 3656, 19536, 15428, 23315, 27255, 23133, 20570, 51, 24847, 28880,
    5839, 9214, 6815, 1804, 343, 15185, 29203, 31179, 22359, 22605, 20349, 14704, 2272, 31863, 6670, 23075,
    27552, 12750, 2667, 5113, 3970, 20470, 29626, 21835, 20557, 6935, 8400, 28205, 5437, 11255, 11429, 15181,
    32451, 30212, 16583, 9409, 19058, 13847, 27064, 20679, 433, 18315, 15491, 696, 12686, 8102, 10019, 16779,
    15419, 30251, 8214, 16454, 27701, 26791, 30472, 32676, 15999, 15560, 15260, 14107, 5449, 13578, 31063, 17,
    32124, 13190, 23233, 22998, 19161, 9372, 7730, 13946, 8329, 23461, 32432, 3428, 25157, 15801, 25343, 8700,
    28197, 31411, 15404, 16582, 18791, 25632, 17330, 32081, 3915, 11271, 19904, 15666, 21669, 22173, 2501, 8068,
    20090, 28651, 26547, 13754, 1997, 28032, 17296, 21402, 28465, 12169, 9299, 29235, 10418, 1900, 7470, 23977,
    14259, 3645, 5122, 20708, 28699, 11246, 23430, 29002, 24485, 30749, 257, 3988, 28694, 32429, 26310, 268,
    30743, 23184, 26879, 29876, 11694, 21424, 29161, 21199, 18553, 20959, 10806, 32189, 14564, 9246, 29461,
    9039, 27374, 22114, 23805, 16884, 16783, 26903, 13239, 22475, 32078, 25043, 12849, 24427, 2618, 7183, 30242,
    28758, 23288, 10707, 12687, 31913, 26220, 30559, 12563, 5392, 9744, 10239, 11834, 13537, 18257, 28314, 5960,
    20364, 9133, 739, 21333, 19916, 22229, 27629, 28871, 15412, 14245, 21276, 1005, 26371, 13479, 26670, 23145,
    24913, 10790, 30533, 9257, 21887, 18636, 1704, 14385, 21423, 21144, 12487, 2524, 28198, 14013, 21669, 22564,
    30623, 1820, 31846, 13433, 5269, 8417, 22524, 4623, 26341, 8546, 573, 8371, 2470, 17305, 5575, 29593, 32214,
    6797, 16491, 20065, 28123, 32745, 21376, 14419, 10986, 10337, 9223, 5551, 23785, 5951, 24644, 24753, 9215,
    171, 4976, 24465, 28151, 7400, 7505, 28907, 8003, 4895, 30820, 16662, 10522, 16009, 12853, 23275, 9807,
    23376, 10872, 24786, 16686, 3699, 25188, 24021, 4101, 1529, 15096, 5555, 26168, 4039, 7969, 26926, 7383,
    9184, 8514, 18441, 66, 18141, 12623, 1196, 25645, 2911, 16585, 6189, 27505, 8041, 21611, 30838, 20147,
    27900, 18021, 27392, 31583, 26956, 12533, 504, 23948, 18315, 6165, 21285, 26201, 14261, 7379, 2007, 22711,
    254, 20869, 12942, 25963, 7905, 28676, 25638, 11662, 30387, 3878, 15924, 8394, 22820, 2310, 16739, 27681,
    2602, 27854, 30699, 9224, 17135, 13740, 20631, 14326, 12592, 29053, 1887, 4915, 8014, 28570, 13048, 25755,
    13691, 29525, 2126, 917, 32679, 1831, 24802, 23689, 31760, 16695, 12364, 2578, 31491, 13404, 8486, 30872,
    27526, 19841, 4879, 23211, 14212, 26808, 22219, 29865, 24198, 1421, 14091, 31881, 18228, 25592, 27741, 7263,
    25626, 2512, 21649, 20049, 25257, 32080, 19038, 9210, 14747, 14146, 6875, 27745, 10245, 32636, 21685, 4382,
    3283, 17515, 32218, 7377, 8533, 7223, 14705, 23618, 17045, 411, 14678, 23653, 14974, 27525, 15098, 11714,
    25818, 22922, 9439, 915, 26911, 4441, 14954, 9336, 3343, 31145, 2521, 14268, 14703, 32013, 5531, 9265,
    11121, 17157, 18871, 23583, 5179, 887, 18844, 21695, 31328, 2668, 2879, 4645, 24575, 8109, 15283, 4162,
    12802, 18625, 18682, 20867, 15870, 19053, 929, 5911, 3858, 4614, 130, 4435, 8958, 4245, 30431, 28152,
    23167, 5644, 16298, 1780, 22254, 18066, 26590, 30275, 20695, 10206, 13697, 585, 15167, 27038, 18931, 15634,
    12354, 1742, 4171, 19200, 2764, 8095, 14861, 1123, 15194, 27015, 26975, 5345, 30171, 14994, 2865, 30720,
    5364, 16500, 11494, 20410, 23199, 20408, 5483, 28209, 6425, 27889, 3360, 30525, 6993, 9111, 24196, 24842,
    1028, 31317, 3746, 22274, 30510, 15096, 8536, 21702, 17168, 4380, 5745, 6158, 2617, 23083, 816, 30722,
    32712, 18407, 11361, 20128, 15513, 6930, 31397, 10336, 22462, 18574, 12471, 31918, 17267, 437, 27319, 14976,
    23939, 28921, 5764, 21925, 7141, 7077, 4611, 15717, 29982, 9555, 7186, 14816, 27370, 31727, 23853, 31926,
    23694, 4260, 12544, 6026, 13686, 2271, 6354, 21821, 21798, 24472, 5343, 2849, 26747, 5348, 23868, 24265,
    8149, 11747, 13517, 16607, 8053, 213, 26176, 21004, 21043, 15084, 8587, 31833, 4469, 25730, 19223, 10752,
    8233, 10149, 25130, 27823, 1622, 19560, 3205, 6568, 12823, 10650, 29340, 4105, 32032, 2266, 27781, 19109,
    28108, 6448, 17311, 22664, 8246, 29067, 1469, 27889, 27228, 29905, 30497, 27041, 1685, 25544, 11403, 31317,
    4343, 5334, 16105, 3785, 19928, 27433, 4518, 29113, 30669, 733, 20962, 30952, 5707, 16075, 18478, 25008,
    4089, 18057, 27259, 31257, 22953, 16248, 35, 15856, 31111, 23531, 26383, 21120, 3677, 7573, 25496, 26346,
    22655, 8566, 9461, 56, 6179, 30018, 1051, 17390, 26867, 26028, 20775, 9415, 25107, 10893, 14155, 16306,
    26117, 737, 11485, 6040, 6827, 6516};

    long long moveCount = 0, compCount = 0;
    heapSort(arr, n, moveCount, compCount);

    for(int i = 0; i < n; i++){
        cout << arr[i] << endl;
    }

}
int main(int argc, char** argv){
    bool debugMode = true;
    if(debugMode){
        test0();
        return 0;
    }
    string inputFileName = argv[1];
    string outputFileName = argv[2];

    ifstream inputFile(inputFileName);
    string currLine;

    int length = 0;
    int currValue;
    while (inputFile >> currValue) {
        length++;
    }

    // Dynamically allocate the array to hold the integers
    int* arr = new int[length];

    // Reset the file stream and read values to the array
    inputFile.clear();
    inputFile.seekg(0, std::ios::beg);
    int currIndex = 0;
    while (inputFile >> currValue) {
        arr[currIndex++] = currValue;
    }
    inputFile.close();
    long long moveCount = 0;
    long long compCount = 0;
    //newHeap.buildHeap(arr, length, moveCount, compCount);
    heapSort(arr, length, moveCount, compCount);

    //write the resulting sorted array into the provided output file
    ofstream outputFile(outputFileName);
    currLine = "Move Count: " + to_string(moveCount) + ", Comparison Count: " + to_string(compCount) + "\n";
    outputFile << currLine;
    for(int i = 0; i < length; i++){
        currLine = to_string(arr[i]) + "\n";
        outputFile << currLine;
    }
    delete[] arr;
    return 0;
}

